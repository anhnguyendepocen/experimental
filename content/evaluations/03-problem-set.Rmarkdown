---
title: "Problem set 3"
linktitle: "Problem set 3"
date: "2021-09-25"
due_date: "2021-10-01"
due_time: "11:55 PM"
menu:
  evaluations:
    parent: Problem sets
    weight: 3
type: docs
toc: true
bibliography: "../../static/bib/references.bib"
csl: "../../static/bib/apa.csl"
---

# Task 1 - Model assumptions

The purpose of this exercise is to explore what happens when the model assumptions of the one-way analysis of variance go wrong using simulations. The interpretation of most statements we encounter (95% of the time) are to be understood in terms of repeated sampling and are valid with the assumption. We can create fake data in **R** and look at the _what if_. This is useful to build your intuition about what could go wrong, keeping in mind that you will have a single realization at end.

The workflow, coded for you `r emo::ji("grinning face")`, is the following:

Keppel and Wickens (p. 149) report some results.

```{r , include = FALSE, eval = FALSE, echo = FALSE}

simulation_study <- 
  function(mean = 1:5,
           sd = 1:5,
           ngroup = 3L,
           nsamp = 20L,
           var.equal = TRUE,
           ...
           ){
    stopifnot()
    mean <- mean[1:ngroup]
      tibble(rnorm(nsamp*ngroup)*rep(sd, each = nsamp))
  
  }
```

```{r pvaluedist, include = FALSE, eval = FALSE, echo = FALSE}
ng <- 4L #number of groups
nsamp <- 20L #number of observations per group
ntot <- ng*nsamp #number of observations (total)
nrep <- 10000L #number of replications
# Create container to store results
pval <- vector(mode = "numeric", length = nrep)
fstat <- vector(mode = "numeric", length = nrep)
# For-loop: repeat these instructions nrep times
for(i in 1:nrep){
  sample <-
    tibble(response = rnorm(n = ntot), # sample No(0,1) variables
           group = factor(rep(1:ng, each = nsamp)))
  # normal data (rnorm), by default with
  # mean zero, std. dev 1
  ## Compute the ANOVA F-statistic
  ftest <- anova(lm(response ~ group, data = sample))
  # Make table to extract p-values more easily
  ftest_tidy <- broom::tidy(ftest)
  # Store the F-statistic and the p-value in the container
  fstat[i] <- ftest_tidy$statistic[1]
  pval[i] <- ftest_tidy$p.value[1]
}
```

# Task 2

Assess the hypothesis of the paper in @ from Problem set 2

# Task 3

Perform all pairwise comparisons for multiple comparisons and 
